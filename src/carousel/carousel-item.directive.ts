import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';@Directive({    selector: '[thy-carousel-item],[thyCarouselItem]',    exportAs: 'thyCarouseItem'})export class ThyCarouselItemDirective {    private _classNames: string;    private _active = false;    activeIndex: number;    carouselItemData = {        isActive: false,        isPrev: false,        isNext: false    };    @Input() class: string = '';    @Input()    set thyClass(val: string) {        this.class = [this.class || '', val].join();    }    set classNames(val: string) {        if (this._classNames === val) return;        this._classNames = val;        this.carouselItemData = {            isActive: this._hasClass(['carousel-item-active']),            isPrev: this._hasClass(['carousel-item-prev']),            isNext: this._hasClass(['carousel-item-next'])        };    }    get classNames() {        return this._classNames;    }    readonly el: HTMLElement;    set isActive(value: boolean) {        // console.log(this.el, value);        this._active = value;        if (this.isActive) {            this.renderer.addClass(this.el, 'carousel-item-active');        } else {            this.renderer.removeClass(this.el, 'carousel-item-active');        }    }    get isActive(): boolean {        return this._active;    }    constructor(elementRef: ElementRef, private renderer: Renderer2) {        this.el = elementRef.nativeElement;        this.renderer.addClass(elementRef.nativeElement, 'carousel-item');    }    private _hasClass(classNames: string[]) {        return classNames.some((className: string) => this._classNames.indexOf(className) >= 0);    }}