@use "sass:color";
@use "../../styles/bootstrap/mixins/gradients";
@use "../../styles/mixins/hover";
@use "../../styles/bootstrap/variables" as bootstrap-variables;
@use "../../styles/mixins/shadow";
@use "../../styles/variables";

// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons
@mixin button-variant(
    $color,
    $hover-color,
    $background,
    $hover-background,
    $border,
    $hover-border: color.adjust($border, $lightness: -10%),
    $active-background: color.adjust($background, $lightness: -10%),
    $active-border: color.adjust($border, $lightness: -12.5%)
) {
    // color: color-yiq($background);
    color: $color;
    @include gradients.gradient-bg($background);
    border-color: $border;
    @include hover.hover {
        // color: color-yiq($hover-background);
        color: $hover-color;
        @include gradients.gradient-bg($hover-background);
        border-color: $hover-border;
        @include shadow.box-shadow(variables.$btn-box-shadow);
    }
    &:focus,
    &.focus {
        // Avoid using mixin so we can pass custom focus shadow properly
        // @if $enable-shadows {
        //     box-shadow: $btn-box-shadow, 0 0 0 $btn-focus-width rgba($border, .5);
        // }
        // @else {
        //     box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);
        // }
    } // Disabled comes first so active can properly restyle
    &.disabled,
    &:disabled {
        &:hover {
            @include button-disabled(variables.$btn-disabled-border-color);
        }
        @include button-disabled(variables.$btn-disabled-border-color);
    }
    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .show > &.dropdown-toggle {
        // color: color-yiq($active-background);
        // background-color: $active-background;
        // @if $enable-gradients {
        //     background-image: none; // Remove the gradient for the pressed/active state
        // }
        // border-color: $active-border;
        &:focus {
            // Avoid using mixin so we can pass custom focus shadow properly
            // @if $enable-shadows {
            //     box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($border, .5);
            // }
            // @else {
            //     box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);
            // }
        }
    }
}

@mixin button-outline-variant($color, $border-color, $hover-color, $hover-background, $hover-border, $active-background, $active-border) {
    color: $color;
    background-color: transparent;
    background-image: none;
    border-color: $border-color;
    &:hover {
        color: $hover-color;
        background-color: $hover-background;
        border-color: $hover-border;
    }
    &:focus,
    &.focus {
        // box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
    }
    &.disabled,
    &:disabled {
        &:hover {
            @include button-disabled(variables.$btn-outline-disabled-border-color);
        }
        @include button-disabled(variables.$btn-outline-disabled-border-color);
    }
    &:not(:disabled):not(.disabled):active,
    &:not(:disabled):not(.disabled).active,
    .show > &.dropdown-toggle {
        color: $hover-color;
        background-color: $active-background;
        border-color: $active-border;
        &:focus {
            // Avoid using mixin so we can pass custom focus shadow properly
            // @if $enable-shadows and $btn-active-box-shadow !=none {
            //     box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($color, .5);
            // }
            // @else {
            //     box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
            // }
        }
    }
}

// Button sizes
@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius, $min-width) {
    padding: $padding-y $padding-x;
    font-size: $font-size;
    line-height: $line-height; // Manually declare to provide an override to the browser default
    @if $min-width {
        min-width: $min-width;
    }
    @if bootstrap-variables.$enable-rounded {
        border-radius: $border-radius;
    } @else {
        border-radius: 0;
    }
    &.btn-link {
        padding: $padding-y 10px;
    }
}

@mixin button-hover-box-shadow($color) {
    &:hover {
        // lighten($primary-active-theme, 15%)
        @include shadow.box-shadow(0px 2px 5px 1px rgba($color, 0.6));
    }
}

@mixin button-disabled($color) {
    color: variables.$btn-disabled-color;
    background-color: variables.$btn-disabled-bg-color;
    border-color: $color;
    // border-color: $btn-disabled-border-color;
    // border: none;
    @include shadow.box-shadow(none);
}

@mixin button-icon-spacing($spacing) {
    & > .thy-icon + span,
    & > span + .thy-icon {
        margin-left: $spacing;
    }
}

@mixin btn-link-variant($link-color, $link-hover-color, $link-hover-decoration) {
    color: $link-color;
    background-color: transparent;
    @include hover.hover {
        color: $link-hover-color;
        text-decoration: $link-hover-decoration;
    }
    &:focus,
    &.focus {
        text-decoration: $link-hover-decoration;
    }
    &:disabled,
    &.disabled {
        color: variables.$btn-link-disabled-color;
        @include hover.hover {
            color: variables.$btn-link-disabled-color;
            text-decoration: none;
        }
    } // No need for an active state here
}

@mixin btn-link-theme-variant($link-hover-color) {
    @include hover.hover {
        color: $link-hover-color;
    }
}

@mixin btn-square-radius {
    // 设置大小也不影响 border-radius
    border-radius: variables.$border-radius;
    &.btn-lg,
    &.btn-md,
    &.btn-sm,
    &.btn-xs {
        border-radius: variables.$border-radius;
    }
}

@mixin btn-icon-circle-hover-variant($round-padding, $btn-icon-circle-font-size, $diameter) {
    &.btn-icon-circle {
        i,
        .wtf,
        .thy-icon {
            padding: $round-padding;
            font-size: $btn-icon-circle-font-size;
            width: $diameter;
            height: $diameter;
        }
        &.border-thick {
            i,
            .wtf,
            .thy-icon {
                padding: $round-padding - variables.$btn-icon-circle-padding-difference;
            }
            @include hover.hover-focus {
                i,
                .wtf {
                    padding: $round-padding - variables.$btn-icon-circle-padding-difference;
                }
            }
        }
        @include hover.hover-focus {
            i,
            .wtf,
            .thy-icon {
                border-width: 2px;
                padding: $round-padding - variables.$btn-icon-circle-padding-difference;
            }
        }
    }
}

@mixin btn-icon-size-variant($font-size, $round-padding, $btn-icon-circle-font-size, $diameter) {
    i,
    .wtf,
    .thy-icon {
        font-size: $font-size;
    }

    @include btn-icon-circle-hover-variant($round-padding, $btn-icon-circle-font-size, $diameter);
}

@mixin btn-icon-only-variant($padding-y, $padding-x, $font-size: variables.$font-size-base) {
    min-width: unset;
    padding: $padding-y $padding-x;
    .thy-icon {
        font-size: $font-size;
    }
}
